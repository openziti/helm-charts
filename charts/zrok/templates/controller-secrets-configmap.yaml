# this manifest contains the secrets and configmaps used by the zrok controller
# both are in one file to allow for generating the secrets with sprig functions

# $influxAdminToken must be defined even if not used because Helm evaluates all vars in the template irrespective of
# their enclosing conditional statement
{{- $influxAdminToken := randAlphaNum 32 | b64enc }}

---
apiVersion: v1
kind: Secret
metadata:
    name: {{ include "zrok.fullname" . }}-admin-secret
    labels:
        {{- include "zrok.labelsController" . | nindent 8 }}
    annotations:
        # "helm.sh/resource-policy": "keep"
type: Opaque
data:
    # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
    {{- $zrokSecretObj := (lookup "v1" "Secret" .Release.Namespace (printf "%s-%s" (include "zrok.fullname" . ) "admin-secret")) | default dict }}
    {{- $zrokSecretData := (get $zrokSecretObj "data") | default dict }}
    # set $zrokAdminToken to existing secret data or generate a random one when not exists
    {{- $zrokAdminToken := (get $zrokSecretData "admin-token") | default (randAlphaNum 32 | b64enc) }}
    # set the secret values..
    admin-token: {{ $zrokAdminToken | quote }}

---
apiVersion: v1
kind: Secret
metadata:
    name: {{ include "zrok.fullname" . }}-ziti-mgmt-secret
    labels:
        {{- include "zrok.labelsController" . | nindent 8 }}
    annotations:
        # "helm.sh/resource-policy": "keep"
type: Opaque
data:
    # set the secret values..
    admin-username: {{ .Values.ziti.username | b64enc | quote }}
    admin-password: {{ .Values.ziti.password | b64enc | quote }}

---
{{- if .Values.influxdb2.adminUser.existingSecret }}
apiVersion: v1
kind: Secret
metadata:
    name: {{ .Values.influxdb2.adminUser.existingSecret }}
    labels:
        {{- include "zrok.labelsController" . | nindent 8 }}
    annotations:
        # "helm.sh/resource-policy": "keep"
type: Opaque
data:
    # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
    {{- $influxSecretObj := (lookup "v1" "Secret" .Release.Namespace .Values.influxdb2.adminUser.existingSecret) | default dict }}
    {{- $influxSecretData := (get $influxSecretObj "data") | default dict }}
    {{- $influxAdminToken := (get $influxSecretData "admin-token") | default (randAlphaNum 32 | b64enc) }}
    {{- $influxAdminPassword := (get $influxSecretData "admin-password") | default (randAlphaNum 32 | b64enc) }}
    # set the secret values..
    admin-token: {{ $influxAdminToken | quote }}
    admin-password: {{ $influxAdminPassword | quote }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
    name: {{ include "zrok.fullname" . }}-config
    labels:
        {{- include "zrok.labelsController" . | nindent 8 }}
data:
    # idempoentent bootstrap script runs as init container before zrok controller
    bootstrap-ziti.bash: |-
        #!/usr/bin/env bash
        set -o errexit
        set -o nounset
        set -o pipefail
        # set -o xtrace

        # uses mounted zrok config YAML
        zrok admin bootstrap /etc/zrok/ctrl.yaml

        # granted permission to read secrets in namespace by SA managed by this chart
        if kubectl -n {{ .Release.Namespace }} get secret \
            {{ include "zrok.fullname" . }}-frontend-identity &>/dev/null; then
            echo "INFO: frontend identity secret exists"
        else
            echo "INFO: frontend identity secret does not exist, creating secret"

            # granted permission to create secrets in this namespace by SA managed by this chart
            kubectl -n {{ .Release.Namespace }} create secret generic \
                {{ include "zrok.fullname" . }}-frontend-identity \
                --from-file=public.json="${HOME}/.zrok/identities/public.json"
        fi

        # while true;do sleep 1;done

    test.bash: |-

        #!/usr/bin/env bash
        set -o errexit
        set -o nounset
        set -o pipefail
        # set -o xtrace  # FIXME remove this

        zrok enable --headless --description "{{ include "zrok.fullname" . }} test run" "${ZROK_ENABLE_TOKEN}"
        
        # exit without error if runs to completion without emitting lines like "ERROR"
        zrok test loopback public \
            --iterations 3 \
            --loopers 3 \
            --min-pacing-ms 222 \
            --max-pacing-ms 222 \
            --min-payload 786432 \
            --max-payload 786432 \
        |& tee /tmp/test.out
        
        zrok disable

        IGNORED_ERRORS='ERROR.*('
        IGNORED_ERRORS+='serviceListener.*looper.*error.*serving.*listener is closed'
        IGNORED_ERRORS+=')'
        if grep -vE "${IGNORED_ERRORS}" /tmp/test.out \
        | grep -q "ERROR"; then
            echo "ERROR: test failed"
            exit 1
        else
            echo "INFO: test passed"
            exit 0
        fi

    ctrl.yaml: |-

        {{- if eq (.Values.controller.specVersion|toString) "3" }}
        #    _____ __ ___ | | __
        #   |_  / '__/ _ \| |/ /
        #    / /| | | (_) |   <
        #   /___|_|  \___/|_|\_\
        # controller configuration
        #

        # The `v` field determines the configuration version. When software is released that changes the structure of the
        # configuration, the software will expect this field to be incremented. This protects you against invalid configuration
        # versions.
        #
        v: 4

        admin:
        # The `secrets` array contains a list of strings that represent valid `ZROK_ADMIN_TOKEN` values to be used for
        # administration of the `zrok` controller.
        #
        # Change this for your installation.
        #
            secrets:
                - {{ $zrokAdminToken | b64dec | quote }}
        # if `tou_link` is present, the frontend will display the "Terms of Use" link on the login and registration forms
        #
        # tou_link:                       '<a href="https://google.com" target="_">Terms and Conditions</a>'

        # The `bridge` section configures the `zrok controller metrics bridge`, specifying the source and sink where OpenZiti
        # `fabric.usage` events are consumed and then sent into `zrok`. For production environments, we recommend that you use
        # the `fileSource`, tailing the events from a JSON file written to by the OpenZiti controller. The `amqpSink` will then
        # forward the events to an AMQP queue for consumption by multiple `zrok` controllers.
        #
        # bridge:
        #     source:
        #         type:           fileSource
        #         path:           /tmp/fabric-usage.log
        #     sink:
        #         type:           amqpSink
        #         url:            amqp://guest:guest@localhost:5672
        #         queue_name:     events

        # The `endpoint` section determines where the HTTP listener that serves the API and web console will be bound.
        #
        endpoint:
            host:             0.0.0.0
            port:             {{ .Values.controller.service.containerPort }}

        {{- if .Values.controller.email.host }}
        # Outbound email configuration.
        #
        email:
            {{- .Values.controller.email | toYaml | nindent 12 }}

        # Configure the generated URL for the registration email. The registration token will be appended to this URL.
        #
        registration:
            registration_url_template:      {{ .Values.controller.ingress.scheme }}://{{ .Values.controller.ingress.hosts | first }}/register

        # Configure the generated URL for password resets. The reset token will be appended to this URL.
        #
        reset_password:
            reset_url_template:             {{ .Values.controller.ingress.scheme }}://{{ .Values.controller.ingress.hosts | first }}/resetPassword
        {{- end }}

        # Set `token_strategy` to `store` to require an invite token
        #
        invites:
            invites_open: {{ .Values.controller.invites.open }}
            {{- if .Values.controller.invites.token_required }}
            token_strategy: store
            {{- end }}

        # Service instance limits configuration.
        #
        # See `docs/guides/metrics-and-limits/configuring-limits.md` for details.
        #
        limits:
            {{- .Values.controller.metrics.limits | toYaml | nindent 12 }}

        # Background maintenance job configuration. The `registration` job purges registration requests created through the
        # `zrok invite` tool. The `reset_password` job purges password reset requests.
        #
        maintenance:
            registration:
                expiration_timeout:           24h
                check_frequency:              1h
                batch_limit:                  500
            reset_password:
                expiration_timeout:           15m
                check_frequency:              15m
                batch_limit:                  500

        {{- if .Values.controller.metrics.enabled }}

        # Metrics configuration for the zrok controller.
        #
        metrics:
            agent:
                # The `source` controls where the `zrok controller` looks to consume OpenZiti `fabric.usage` events. This works in
                # concert with the `bridge` section above to consume events from an AMQP queue. This can also be configured to work
                # with a `fileSource` (see the `bridge` section above for details), and also with a `websocketSource`.
                #
                source:
                    type:               {{ .Values.controller.metrics.agent.source.type }}
                    {{- if eq .Values.controller.metrics.agent.source.type "amqpSource" }}
                    url:                amqp://{{ .Values.controller.metrics.ampqSource.user }}:{{ .Values.controller.metrics.ampqSource.password }}@{{ .Values.controller.metrics.ampqSource.advertisedHost }}:{{ .Values.controller.metrics.ampqSource.advertisedPort }}
                    queue_name:         {{ .Values.ampqSource.queueName }}
                    {{- else if eq .Values.controller.metrics.agent.source.type "websocketSource" }}
                    websocket_endpoint: wss://{{ .Values.ziti.advertisedHost }}:{{ .Values.ziti.advertisedPort }}/fabric/v1/ws-api
                    api_endpoint:       https://{{ .Values.ziti.advertisedHost }}:{{ .Values.ziti.advertisedPort }}
                    username:           {{ .Values.ziti.username | quote }}
                    password:           {{ .Values.ziti.password | quote }}
                    {{- else if eq .Values.controller.metrics.agent.source.type "fileSource" }}
                    path:               {{ .Values.controller.metrics.fileSource.path | quote }}
                    {{- end }}
            #
            # The `influx` section configures access to the InfluxDB instance used to store `zrok` metrics, you may
            # provide the influx instance by installing the subchart or by providing the `influxdb2.service.url` value.
            #
            influx:
                {{- if .Values.influxdb2.enabled }}
                # use the InfluxDB instance deployed by the subchart.
                url: {{ printf "http://%s.%s.svc:%s" (include "influxdb2.fullname" .Subcharts.influxdb2) .Release.Namespace .Values.influxdb2.service.port | quote }}
                {{- else }}
                # otherwise, use the InfluxDB instance specified by the `influxdb2.service.url`
                url:            {{ .Values.influxdb2.service.url | quote }}
                {{- end }}
                bucket:         zrok
                org:            zrok
                token:          {{ $influxAdminToken | b64dec | quote }}
        {{- end }}

        # Configure the controller database. Supports either PostgreSQL or sqlite3.
        #
        # sqlite3 only supports a single controller instance. To run multiple controllers, you must use PostgreSQL.
        #
        #store:
        #  path:                           "host=127.0.0.1 user=zrok password=zrok dbname=zrok"
        #  type:                           "postgres"
        #
        store:
            path:                           {{ .Values.controller.persistence.mount_dir }}/zrok.sqlite3
            type:                           sqlite3

        # Ziti configuration.
        #
        ziti:
            api_endpoint:     https://{{ .Values.ziti.advertisedHost }}:{{ .Values.ziti.advertisedPort }}
            username:         {{ .Values.ziti.username | quote }}
            password:         {{ .Values.ziti.password | quote }}

        {{- if .Values.controller.extraConfig }}
        {{ toYaml .Values.controller.extraConfig }}
        {{- end }}

        # end spec v3 config template
        {{- end }}
