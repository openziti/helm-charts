---
apiVersion: v1
kind: Secret
metadata:
    name: {{ include "zrok.fullname" . }}-ziggy-account-password
    labels:
        {{- include "zrok.labelsController" . | nindent 8 }}
    annotations:
        # "helm.sh/resource-policy": "keep"
type: Opaque
data:
    # retrieve the secret data using lookup function and when not exists, return an empty dictionary / map as result
    {{- $ziggySecretObj := (lookup "v1" "Secret" .Release.Namespace (printf "%s-%s" (include "zrok.fullname" . ) "ziggy-account-password")) | default dict }}
    {{- $ziggySecretData := (get $ziggySecretObj "data") | default dict }}
    # set $zrokAdminToken to existing secret data or generate a random one when not exists
    {{- $ziggyPassword := (get $ziggySecretData "password") | default (randAlphaNum 32 | b64enc) }}
    # set the secret values..
    username: {{ printf "ziggy@%s" .Values.dnsZone | b64enc | quote }}
    password: {{ $ziggyPassword | quote }}

---
apiVersion: v1
kind: ConfigMap
metadata:
    name: {{ include "zrok.fullname" . }}-frontend-config
    labels:
        {{- include "zrok.labelsFrontend" . | nindent 8 }}
data:
    # post-install hook runs until one completion after Helm install/create release
    bootstrap-frontend.bash: |-
        #!/usr/bin/env bash

        set -o errexit
        set -o nounset
        set -o pipefail
        # set -o xtrace

        # mounted script from frontend configmap
        zitiLogin
        
        getZitiPublicFrontend(){
            local RETURNED
            local -A FIELDS
            FIELDS[all]=0
            FIELDS[zid]=1
            FIELDS[name]=2
            FIELDS[type]=3
            FIELDS[attributes]=4
            FIELDS[policy]=5

            if (( $# )); then
                RETURNED="$1"
                shift
            else
                RETURNED="all"
            fi

            if (( $# )); then
                echo "WARN: ignoring unexpected parameters: $*" >&2
            fi

            if [[ -z "${FIELDS[$RETURNED]}" ]]; then
                echo "ERROR: invalid return field $RETURNED" >&2
                return 1
            fi

            ziti edge list identities 'name="public"' --csv \
                | awk -F, '$'${FIELDS[name]}'=="public" {print $'${FIELDS[$RETURNED]}';}'
        }

        # find Ziti ID of default "public" frontend
        ZITI_PUBLIC_ID="$(getZitiPublicFrontend zid)"
        until [[ -n "${ZITI_PUBLIC_ID}" ]]; do
            echo "DEBUG: waiting for default frontend "public" Ziti identity to be created"
            sleep 3
            ZITI_PUBLIC_ID="$(getZitiPublicFrontend zid)"
        done
        echo "DEBUG: 'public' ZITI_PUBLIC_ID=$ZITI_PUBLIC_ID"

        until curl -sSf "${ZROK_API_ENDPOINT}/api/v1/version"; do
            echo "DEBUG: waiting for zrok controller API version endpoint to respond"
            sleep 3
        done

        getZrokPublicFrontend(){
            local RETURNED
            local -A FIELDS
            FIELDS[all]=0
            FIELDS[token]=1
            FIELDS[zid]=2
            FIELDS[name]=3
            FIELDS[template]=4
            FIELDS[created]=5
            FIELDS[updated]=6

            if (( $# )); then
                RETURNED="$1"
                shift
            else
                RETURNED="all"
            fi

            if (( $# )); then
                echo "WARN: ignoring unexpected parameters: $*" >&2
            fi

            if [[ -z "${FIELDS[$RETURNED]}" ]]; then
                echo "ERROR: invalid return field $RETURNED" >&2
                return 1
            fi

            # strip ANSI sequences and return the first position from the line with a name exactly matching "public"
            zrok admin list frontends | sed 's/\x1b\[[0-9;]*m//g' \
            | awk '$'${FIELDS[name]}'=="public" {print $'${FIELDS[$RETURNED]}'}'
        }

        # if default "public" frontend already exists
        ZROK_PUBLIC_TOKEN=$(getZrokPublicFrontend token)
        if [[ -n "${ZROK_PUBLIC_TOKEN}" ]]; then
            
            # ensure the Ziti ID of the public frontend's identity is the same in Ziti and zrok
            ZROK_PUBLIC_ZID=$(getZrokPublicFrontend zid)
            if [[ "${ZITI_PUBLIC_ID}" != "${ZROK_PUBLIC_ZID}" ]]; then
                echo "ERROR: existing Ziti Identity named 'public' with id '$ZITI_PUBLIC_ID' is from a previous zrok"\
                "instance life cycle. Delete it then re-run zrok." >&2
                exit 1
            fi

            echo "INFO: updating frontend"
            zrok admin update frontend "${ZROK_PUBLIC_TOKEN}" \
                --url-template "{{ .Values.frontend.ingress.scheme }}://{token}.{{ .Values.dnsZone }}"
        else
            echo "INFO: creating frontend"
            zrok admin create frontend -- "${ZITI_PUBLIC_ID}" public \
                "{{ .Values.frontend.ingress.scheme }}://{token}.{{ .Values.dnsZone }}"
        fi

        # granted permission to read secrets in namespace by SA managed by this chart
        if kubectl -n {{ .Release.Namespace }} get secret \
            {{ include "zrok.fullname" . }}-ziggy-account-token &>/dev/null; then
            echo "INFO: ziggy account enable token secret exists"
        else
            echo "INFO: ziggy account enable token secret does not exist, creating secret"
            # create a default user account named "ziggy" and save the enable token in a Secret resource
            zrok admin create account \
                ziggy@{{ .Values.dnsZone }} \
                {{ $ziggyPassword | b64dec | quote }} \
            | xargs -I TOKEN kubectl -n {{ .Release.Namespace }} create secret generic \
                {{ include "zrok.fullname" . }}-ziggy-account-token \
                --from-literal=token=TOKEN
            # xargs -r is NOT used here because this command must fail loudly if the account token was not created

        fi

    frontend.yaml: |-
        #    _____ __ ___ | | __
        #   |_  / '__/ _ \| |/ /
        #    / /| | | (_) |   <
        #   /___|_|  \___/|_|\_\
        # frontend configuration
        v: {{ .Values.frontend.specVersion }}
        host_match: {{ .Values.dnsZone | quote }}
        address: 0.0.0.0:{{ .Values.frontend.service.containerPort }}
        {{- if .Values.frontend.extraConfig }}
        {{ toYaml .Values.frontend.extraConfig }}
        {{- end }}

    unbootstrap.bash: |-
        #!/usr/bin/env bash
        set -o errexit
        set -o nounset
        set -o pipefail
        # set -o xtrace

        if kubectl -n {{ .Release.Namespace }} get secret \
            {{ include "zrok.fullname" . }}-frontend-identity &>/dev/null
        then
            kubectl -n {{ .Release.Namespace }} delete secret \
                {{ include "zrok.fullname" . }}-frontend-identity
            echo "INFO: deleted default 'public' frontend identity."
        else
            echo "INFO: default 'public' frontend identity secret does not exist."
        fi

        if kubectl -n {{ .Release.Namespace }} get secret \
            {{ include "zrok.fullname" . }}-ziggy-account-token &>/dev/null
        then
            kubectl -n {{ .Release.Namespace }} delete secret \
                {{ include "zrok.fullname" . }}-ziggy-account-token
            echo "INFO: deleted ziggy account enable token secret"
        else
            echo "INFO: ziggy account enable token secret doesn't exist"
        fi

        set +o errexit
        # try to remove the two Ziti entities created by zrok admin bootstrap, but catch exceptions because there's no
        # expectation that the ziti controller is still reachable during zrok uninstall
        zitiLogin
        
        zrok admin unbootstrap /etc/zrok/ctrl.yaml

    zitiLogin: |-
        #!/usr/bin/env bash
        set -o errexit
        set -o nounset
        set -o pipefail
        # set -o xtrace

        # the --yes flag is NOT used here because this attempt MUST fail if the server cert can't be verified by the
        # Trust Manager Bundle resource mounted on the container
        ziti edge login "${ZITI_MGMT_API}" \
            --username "${ZITI_ADMIN_USER}" \
            --password "${ZITI_ADMIN_PASSWORD}" \
            --ca "{{ .Values.ziti.ca_cert_dir }}/{{ .Values.ziti.ca_cert_file }}"
